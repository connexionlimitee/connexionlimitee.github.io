{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,0GCyD5BC,MArDf,WACE,OACE,yBAAKC,UAAU,YACb,yBAAKA,UAAU,iBAEb,wBAAIA,UAAU,yBAAd,aACA,wBAAIA,UAAU,iBAAd,wBACA,0BAAMA,UAAU,YAChB,wBAAIA,UAAU,iBAAd,sBACA,wBAAIA,UAAU,yBAAd,eAGF,yBAAKA,UAAU,cACb,wBAAIA,UAAU,UAAd,6DACA,wBAAIA,UAAU,UAAd,oDAEF,yBAAKA,UAAU,eACb,2EAEF,0BAAMA,UAAU,YAChB,yBAAKA,UAAU,cACb,yBAAKA,UAAU,UACb,+CACA,2CACa,wEADb,ioCAGA,6CAEF,yBAAKA,UAAU,UACb,qCACA,2BACE,iFADF,2pBACmsB,mDADnsB,iYAIA,0DAGJ,yBAAKA,UAAU,8BACb,0BAAMA,UAAU,UACd,+CACA,4CACA,kDACA,4CAGJ,yBAAKA,UAAU,6BACb,wBAAIA,UAAU,UAAd,8DACA,wBAAIA,UAAU,UAAd,wDCvCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0517c56a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='app-page'>\n      <div className='title-section'>\n\n        <h1 className='title-text massive fr'>Collectif</h1>\n        <h1 className='title-text fr'>Connexion Limitée</h1>\n        <span className='divider'/>\n        <h1 className='title-text en'>Limited Connection</h1>\n        <h1 className='title-text massive en'>Collective</h1>\n\n      </div>\n      <div className='two-column'>\n        <h2 className='column'>collectif de traduction littéraire franco-américain</h2>\n        <h2 className='column'>french-american literary translation collective</h2>\n      </div>\n      <div className='description'>\n        <h3>connexionlimitee [à / at] gmail [.] com</h3>\n      </div>\n      <span className='divider'/>\n      <div className='two-column'>\n        <div className='column'>\n          <h2>Présentation</h2>\n          <p>\n          Le collectif <b>Connexion Limitée / Limited Connection</b> est né d’une rencontre transatlantique entre Providence (Etats-Unis) et Paris (France) en septembre 2019, d’un désir commun de quatre jeunes poètes de contribuer à ouvrir le champ poétique étatsunien ultra-contemporain à la France et réciproquement. Nous sommes deux français.e.s et deux américain.e.s, qui tou.te.s ont vécu dans l’autre pays, et étudié l’art et la littérature. Nous représentons des identités raciales et sexuelles diverses. Des valeurs nous rassemblent, au-delà de notre passion commune pour la poésie et le travail de la langue ; parmi elles, l’attention particulière à faire connaître par nos traductions des poètes qui, pour des raisons économiques ou politiques, nous paraissent moins bien visibilisé.e.s par le monde éditorial. Nous avons également soin de travailler en accord et en dialogue avec les auteur.rices que nous avons choisi de traduire. La dimension collective de nos traductions est au coeur de notre projet, puisqu’elle donne lieu à une traduction enrichie par nos savoirs et expériences divers.\n          </p>\n          <h2>Nous sommes:</h2>\n        </div>\n        <div className='column'>\n          <h2>About</h2>\n          <p>\n            <b>Limited Connection Collective/Connexion Limitée</b> is a transatlantic translation collective founded in 2019 out of a desire to open contemporary US-American poetics to the French literary scene and vice-versa. Currently, the collective is based both in Paris and in Providence, RI, comprising two American and two French poets. All four members have lived in both countries, and all have their own art and literary practices. One of the collective’s primary goals is to translate underrepresented poets in literary translation, and to work in conversation with the poets they translate. They have translated works by poets such as Mónica de la Torre and Eleni Sikelianos into French; Laura Vasquez’s <i>The Hand of the Hand</i> is their first translation from French to English.\n            The name, Limited Connection, comes from a translation residency in rural Normandy, where cell service was extremely limited. Even after returning to city life, the name stuck, reflecting the members’ belief in translation as a form of limited connection, and in the possibility of creating symbiotic worlds and communities.\n          </p>\n          <h2>Our current members are:</h2>\n        </div>\n      </div>\n      <div className='description divider-bottom'>\n        <span className='inline'>\n          <p>Shira Abramovich</p>\n          <p>Camille Blanc</p>\n          <p>Lénaïg Cariou</p>\n          <p>Nadia Wolff</p>\n        </span>\n      </div>\n      <div className='two-column divider-bottom'>\n        <h2 className='column'>Ce site est en cours de construction. Revenez bientôt !</h2>\n        <h2 className='column'>This site is under construction. Check back soon!</h2>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}